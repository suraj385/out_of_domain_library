import torchfrom torchvision import models, transformsfrom PIL import Imageimport osimport numpy as npfrom sklearn.metrics.pairwise import cosine_similaritymodel = models.resnet50(weights=models.ResNet50_Weights.DEFAULT)model.eval()preprocess = transforms.Compose([    transforms.Resize(256),    transforms.CenterCrop(224),    transforms.ToTensor(),    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),])def extract_features(image_path):    """    Extract features from an image using ResNet50.        Args:        image_path (str): Path to the image file.        Returns:        np.ndarray: Extracted features as a flattened numpy array.    """    input_image = Image.open(image_path).convert("RGB")    input_tensor = preprocess(input_image)    input_batch = input_tensor.unsqueeze(0)    with torch.no_grad():        output = model(input_batch)    return output.numpy().flatten()def is_in_domain(image_path, gallery_features, threshold=0.85):    """    Check if an image is in-domain based on cosine similarity with gallery features.        Args:        image_path (str): Path to the image file.        gallery_features (np.ndarray): Array of gallery features.        threshold (float): Similarity threshold for determining in-domain status.        Returns:        bool: True if image is in-domain, False otherwise.    """    input_features = extract_features(image_path)    similarities = cosine_similarity([input_features], gallery_features)    max_similarity = np.max(similarities)    return max_similarity >= thresholddef evaluate_model(gallery_features, test_folder, true_label, threshold=0.85):    """    Evaluate the model on a set of test images.        Args:        gallery_features (np.ndarray): Array of gallery features.        test_folder (str): Path to the folder containing test images.        true_label (bool): True if the test folder contains in-domain images, False otherwise.        threshold (float): Similarity threshold for determining in-domain status.        Returns:        tuple: (correct, total, accuracy)    """    correct = 0    total = 0    for root, _, files in os.walk(test_folder):        test_files = [f for f in files if f.endswith((".jpg", ".png", ".jpeg"))]        total += len(test_files)        for filename in test_files:            img_path = os.path.join(root, filename)            result = is_in_domain(img_path, gallery_features, threshold)            if result == true_label:                correct += 1    accuracy = correct / total if total > 0 else 0    return correct, total, accuracy