import osimport torchfrom torchvision import models, transformsfrom PIL import Imageimport numpy as npdef get_model(model_name):    if model_name == 'resnet18':        model = models.resnet18(weights=models.ResNet18_Weights.DEFAULT)    elif model_name == 'resnet34':        model = models.resnet34(weights=models.ResNet34_Weights.DEFAULT)    elif model_name == 'resnet50':        model = models.resnet50(weights=models.ResNet50_Weights.DEFAULT)    elif model_name == 'resnet101':        model = models.resnet101(weights=models.ResNet101_Weights.DEFAULT)    elif model_name == 'resnet152':        model = models.resnet152(weights=models.ResNet152_Weights.DEFAULT)    elif model_name == 'vgg16':        model = models.vgg16(weights=models.VGG16_Weights.DEFAULT)    elif model_name == 'vgg19':        model = models.vgg19(weights=models.VGG19_Weights.DEFAULT)    elif model_name == 'inception_v3':        model = models.inception_v3(weights=models.Inception_V3_Weights.DEFAULT)    elif model_name == 'densenet121':        model = models.densenet121(weights=models.DenseNet121_Weights.DEFAULT)    elif model_name == 'densenet169':        model = models.densenet169(weights=models.DenseNet169_Weights.DEFAULT)    elif model_name == 'efficientnet_b0':        model = models.efficientnet_b0(weights=models.EfficientNet_B0_Weights.DEFAULT)    elif model_name == 'efficientnet_b7':        model = models.efficientnet_b7(weights=models.EfficientNet_B7_Weights.DEFAULT)    else:        raise ValueError(f"Model {model_name} is not supported.")    model.eval()    return modelpreprocess = transforms.Compose([    transforms.Resize(256),    transforms.CenterCrop(224),    transforms.ToTensor(),    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),])def save_gallery_features(image_folder, model_name):    """    Extract features from all images in a folder using a specified model and save them to a file.        Args:        image_folder (str): Path to the folder containing images.        model_name (str): Name of the model to use for feature extraction.    """    model = get_model(model_name)        gallery_features = []    for filename in os.listdir(image_folder):        if filename.endswith(".jpg") or filename.endswith(".png"):            img_path = os.path.join(image_folder, filename)            input_image = Image.open(img_path).convert("RGB")            input_tensor = preprocess(input_image)            input_batch = input_tensor.unsqueeze(0)            with torch.no_grad():                output = model(input_batch)            features = output.numpy().flatten()            gallery_features.append(features)    gallery_features = np.array(gallery_features)    np.save(model_name, gallery_features)    print(f"Extracted and saved features for all images in {model_name}.npy")