import osimport torchfrom torchvision import models, transformsfrom PIL import Imageimport numpy as npmodel = models.resnet50(weights=models.ResNet50_Weights.DEFAULT)model.eval()preprocess = transforms.Compose([    transforms.Resize(256),    transforms.CenterCrop(224),    transforms.ToTensor(),    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),])def extract_features(image_path):    """    Extract features from an image using ResNet50.        Args:        image_path (str): Path to the image file.        Returns:        np.ndarray: Extracted features as a flattened numpy array.    """    input_image = Image.open(image_path).convert("RGB")    input_tensor = preprocess(input_image)    input_batch = input_tensor.unsqueeze(0)    with torch.no_grad():        output = model(input_batch)    return output.numpy().flatten()def save_gallery_features(image_folder, output_file="gallery_features.npy"):    """    Extract features from all images in a folder and save them to a file.        Args:        image_folder (str): Path to the folder containing images.        output_file (str): Path to the output file where features will be saved.    """    gallery_features = []    for filename in os.listdir(image_folder):        if filename.endswith(".jpg") or filename.endswith(".png"):            img_path = os.path.join(image_folder, filename)            features = extract_features(img_path)            gallery_features.append(features)    gallery_features = np.array(gallery_features)    np.save(output_file, gallery_features)    print(f"Extracted and saved features for all images in {output_file}.")